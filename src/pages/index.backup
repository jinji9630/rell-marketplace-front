import React, { useState, useEffect } from 'react';
import { createClient } from "postchain-client";
import { v4 as uuidv4 } from 'uuid';

const App = () => {
  const [books, setBooks] = useState([]);
  const [title, setTitle] = useState('');
  const [author, setAuthor] = useState('');
  const [editingIndex, setEditingIndex] = useState(null);

  // Load books from local storage on mount
  useEffect(() => {
    const loadBooks = async () => {
      const savedBooks = JSON.parse(localStorage.getItem('books'));
      if (savedBooks) {
        setBooks(savedBooks);
      }
      const client = await createClient({
        nodeUrlPool: "http://localhost:7740",
        blockchainRid: "5DBF34DAE13460D581771389CD1080B513A9674FDDB4D2CA8451E512871CAA1B",
      });

      try {
        const fetchedBooks = await client.query("get_all_books", {});
        setBooks(fetchedBooks);
      } catch (error) {
        console.error("Query error:", error);
      }
    };

    loadBooks();
  }, []);

  const handleAddOrUpdateBook = async () => {
    if (editingIndex !== null) {
      const updatedBooks = books.map((book, index) =>
        index === editingIndex ? { ...book, title, author } : book
      );
      setBooks(updatedBooks);
      setEditingIndex(null);
    } else {
      setBooks([...books, { title, author }]);
      const bookid =uuidv4();
      const client = await createClient({
        nodeUrlPool: "http://localhost:7740",
        blockchainRid: "5DBF34DAE13460D581771389CD1080B513A9674FDDB4D2CA8451E512871CAA1B",
      });
      await client.sendTransaction(
        {
          name: "create_book",
          args: [bookid, title, author],
        }
      );
      alert('Book  created successfuly !')

    }
    setTitle('');
    setAuthor('');
  };

  const handleEditBook = (index) => {
    setEditingIndex(index);
    setTitle(books[index].title);
    setAuthor(books[index].author);
  };

  const handleDeleteBook = (index) => {
    setBooks(books.filter((_, i) => i !== index));
  };

  return (
    <div style={styles.container}>
      <header style={styles.header}>
        <span style={styles.emoji}>üìö</span>
        <h1 style={styles.title}>Book Manager</h1>
      </header>
      <input
        type="text"
        value={title}
        onChange={(e) => setTitle(e.target.value)}
        placeholder="Enter book title"
        style={styles.input}
      />
      <input
        type="text"
        value={author}
        onChange={(e) => setAuthor(e.target.value)}
        placeholder="Enter author name"
        style={styles.input}
      />
      <button onClick={handleAddOrUpdateBook} style={styles.button}>
        {editingIndex !== null ? 'Update Book' : 'Add Book'}
      </button>
      <ul style={styles.list}>
        {books.map((book, index) => (
          <li key={index} style={styles.listItem}>
            {book.title} by {book.author}
            <button onClick={() => handleEditBook(index)} style={styles.editButton}>‚úèÔ∏è</button>
            <button onClick={() => handleDeleteBook(index)} style={styles.deleteButton}>‚ùå</button>
          </li>
        ))}
      </ul>
    </div>
  );
};

const styles = {
  container: {
    textAlign: 'center',
    padding: '20px',
    fontFamily: 'Arial, sans-serif',
  },
  header: {
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    marginBottom: '20px',
  },
  emoji: {
    fontSize: '50px',
    marginRight: '10px',
  },
  title: {
    fontSize: '24px',
  },
  input: {
    padding: '10px',
    fontSize: '16px',
    width: '200px',
    marginRight: '10px',
  },
  button: {
    padding: '10px 15px',
    fontSize: '16px',
    backgroundColor: 'purple',
    color: 'white',
    border: 'none',
    cursor: 'pointer',
  },
  list: {
    listStyleType: 'none',
    padding: 0,
  },
  listItem: {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    margin: '5px 0',
    padding: '10px',
    backgroundColor: '#f9f9f9',
    border: '1px solid #ddd',
  },
  editButton: {
    marginLeft: '10px',
    backgroundColor: 'blue',
    color: 'white',
    border: 'none',
    cursor: 'pointer',
  },
  deleteButton: {
    marginLeft: '10px',
    backgroundColor: 'red',
    color: 'white',
    border: 'none',
    cursor: 'pointer',
  },
};

export default App;
